class Solution {
    HashSet<List<Integer>> set = new HashSet<>();
    public void traverse(int a[],int req,int curr,int i,List<Integer> list){
        if(i>=a.length){return;}
        if(curr>req){return;}
        if(curr==req){set.add(list);return;}
        List<Integer> arr = new ArrayList<>(list);
        arr.add(a[i]);
        traverse(a,req,curr+a[i],i,arr);
        traverse(a,req,curr+a[i],i+1,arr);
        traverse(a,req,curr,i+1,list);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        traverse(candidates,target,0,0,new ArrayList<>());
        
        List<List<Integer>> res = new ArrayList<>();
        for(List<Integer> x:set){
            res.add(x);
        }
        return res;
    }
}
