/**

 * Definition for singly-linked list.
 * public class ListNode {  
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 
 */
class Solution {
    public void print(ListNode node){
        while(node!=null){
            System.out.print(node.val+" ");
            node=node.next;
        }
    }
    public ListNode rotateRight(ListNode head, int k) {
  if(k==0 || head == null){
        return head;
    }

    ListNode sizePointer = head;
    int size = 0;
    
    while(sizePointer != null){
        sizePointer = sizePointer.next;
        size++;
    }
   
    if(k == size){
        return head;
    }
    
    int rotate = k > size ? k%size : k;

    ListNode fast = head;
    ListNode slow = head;
    
    for (int i = 0; i < rotate; ++i) {
        
        if (fast.next == null)
            fast = head;
        else
            fast = fast.next;
    }
    
    while (fast.next != null) {
        
        fast = fast.next;
        slow = slow.next;
    }
    
    ListNode newHead;
    if (slow.next != null)
        newHead = slow.next;
    else
        newHead = head;
    
    slow.next = null;
    
    if (newHead != head)
        fast.next = head;
    
    return newHead;
}
    }
